let mongoose,bcrypt;_e8e‍.x([["default",()=>_e8e‍.o]]);_e8e‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_e8e‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const {Schema} = mongoose

const userSchema = new Schema({
    name:{
        type:String,
        trim: true,
        required: 'Name is required'
    },
    email:{
        type: String,
        trim: true,
        required: 'Email is required',
        unique: true
    },
    password:{
        type:String,
        required: true,
        min:6,
        max: 64
    },
    stripe_account_id: '',
    stripe_seller: {},
    stripeSession: {}
 },
  {timestamps:true}
)

userSchema.pre("save", function(next){
    let user = this
    if (user.isModified("password")) {
        return bcrypt.hash(user.password, 12 , function(err,hash){
            if (err) {
                _e8e‍.g.console.log("BCRYPT HASH ERR", err)
                return next(err)
                
            } 
                user.password = hash;
                return next()
         });            
    } else {
        return next();   
    }
});

userSchema.methods.comparePassword = function (password, next){
    bcrypt.compare(password, this.password, function(err, match){
        if(err){
            _e8e‍.g.console.log("Compare password err", err)
            return next (err,false)
        }

        _e8e‍.g.console.log("MATCH PASSWORD", match)
        return next(null, match)
    })
}


_e8e‍.d(mongoose.model("User", userSchema));